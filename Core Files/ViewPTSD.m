function ViewPTSD ( dataset )

    handles.dataset = dataset;
    handles = MakePTSDGUI(handles);
    handles = PopulateGUI(handles);
    
end


function handles = MakePTSDGUI ( handles )

    %Define figure height and width (in pixels)
    figure_width = 1000;
    figure_height = 700;
    
    %Create main figure
    handles.mainfig = figure('units', 'pixels');
    pos = get(handles.mainfig, 'position');
    set(handles.mainfig, ...
        'units', 'pixels', ...
        'position', [pos(1) (pos(2)+pos(4) - figure_height) figure_width figure_height], ...
        'menubar', 'none', ...
        'numbertitle', 'off', ...
        'resize', 'off', ...
        'name', 'PTSD View');
    handles.fig_background_color = get(handles.mainfig, 'color');
    
    %Create rat-selection drop-down box
    uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', 'w', ...
        'horizontalalignment', 'left', ...
        'string', 'Rat: ', ...
        'parent', handles.mainfig, ...
        'units', 'normalized', ...
        'position', [0.02 0.85 0.05 0.05]);
    handles.rat_combo_box = uicontrol('style', 'popupmenu', ...
        'fontsize', 12, ...
        'horizontalalignment', 'left', ...
        'string', 'Select a rat', ...
        'callback', @rat_select_callback, ...
        'parent', handles.mainfig, ...
        'units', 'normalized', ...
        'position', [0.08 0.85 0.2 0.05]);
    
    %Create session-selection drop-down box
    uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', 'w', ...
        'horizontalalignment', 'left', ...
        'string', 'Session: ', ...
        'parent', handles.mainfig, ...
        'units', 'normalized', ...
        'position', [0.3 0.85 0.1 0.05]);
    handles.session_combo_box = uicontrol('style', 'popupmenu', ...
        'fontsize', 12, ...
        'horizontalalignment', 'left', ...
        'string', 'Select a session', ...
        'callback', @session_select_callback, ...
        'parent', handles.mainfig, ...
        'units', 'normalized', ...
        'position', [0.4 0.85 0.2 0.05]);
    
    %Create a button that allows the user to copy the current axis to a new
    %figure
    handles.copy_figure_button = uicontrol('style', 'pushbutton', ...
        'string', 'Copy Figure', ...
        'fontsize', 12, ...
        'fontweight', 'bold', ...
        'callback', @copy_figure_callback, ...
        'units', 'normalized', ...
        'position', [0.7 0.85 0.15 0.05]);
    
    %Create tabbed panel
    handles.tabgp = uitabgroup(handles.mainfig,'Position',[.02 .02 .96 .8]);
    handles.tabNewZero = uitab(handles.tabgp,'Title','View Groups','Tag','Groups');
    handles.tab0 = uitab(handles.tabgp,'Title','View All Rats','Tag','AllRats');
    handles.tab1 = uitab(handles.tabgp,'Title','View Rat','Tag','SingleRat');
    handles.tab2 = uitab(handles.tabgp,'Title','View Sessions','Tag','Sessions');
    handles.tab4 = uitab(handles.tabgp,'Title','View Segments','Tag','Segments');
    handles.tab3 = uitab(handles.tabgp,'Title','View Trials','Tag','Trials');
    handles.tab_group = handles.tabgp;
    
    %Create the group analysis tab
    handles = MakeGroupAnalysisTab(handles);
        
    %Create the "all rats" tab
    handles = MakeAllRatsAnalysisTab(handles);
    
    %Create the "sessions" tab
    handles = MakeSessionsAnalysisTab(handles);
    
    %Create the "trials" tab
    handles = MakeTrialsAnalysisTab(handles);
    
    %Create the "segments" tab
    handles = MakeSegmentsAnalysisTab(handles);
    
    guidata(handles.mainfig, handles);

end

function handles = MakeGroupAnalysisTab ( handles )

    %Create UI elements for the "view groups" tab
    uicontrol('style', 'text', ...
        'fontsize', 10, ...
        'backgroundcolor', handles.fig_background_color, ...
        'horizontalalignment', 'left', ...
        'string', 'Which groups would you like to show?', ...
        'parent', handles.tabNewZero, ...
        'units', 'normalized', ...
        'position', [0.7 0.92 0.3 0.05]);
    handles.groups_display_parent_panel = uipanel('parent', handles.tabNewZero, ...
        'units', 'normalized', ...
        'position', [0.7 0.67 0.28 0.21], ...
        'backgroundcolor', handles.fig_background_color);
    
    num_groups = length(handles.dataset.GroupNames);
    ydist_per_group = (72/4); %We will use units of "points", which are 1/72 of an inch, so each checkbox is 1/4 inch in height.
    total_ydist = ydist_per_group * (num_groups + 2);
    
    set(handles.groups_display_parent_panel, 'units', 'points');
    parent_panel_position = get(handles.groups_display_parent_panel, 'position');
    
    total_xdist = parent_panel_position(3);
    parent_height = parent_panel_position(4);
    initial_ypos = parent_height - total_ydist - (ydist_per_group / 2);
    handles.group_content_lower_ypos = initial_ypos;
    handles.group_content_upper_ypos = 0;
    handles.group_content_travel_step = ydist_per_group;
    
    handles.groups_display_content_panel = uipanel('parent', handles.groups_display_parent_panel, ...
        'units', 'points', ...
        'position', [0 initial_ypos total_xdist total_ydist], ...
        'bordertype', 'none');
    handles.groups_display_slider = uicontrol('style', 'slider', ...
        'parent', handles.groups_display_parent_panel, ...
        'units', 'normalized', ...
        'position', [0.93 0 0.08 1], ...
        'Min',1, ...
        'Max',10, ...
        'Value',10, ...
        'SliderStep', [1, 1] / (10 - 1), ...
        'Callback', @groups_display_slider_callback);
    
    current_ypos = total_ydist - ydist_per_group;
    handles.groups_select_all_checkbox = uicontrol('style', 'checkbox', ...
            'parent', handles.groups_display_content_panel, ...
            'units', 'points', ...
            'position', [0 current_ypos total_xdist ydist_per_group], ...
            'string', 'Show all groups', ...
            'callback', @groups_analysis_handle_checkbox);
    current_ypos = current_ypos - ydist_per_group;
    
    %Create a check box for each group
    handles.group_selection_checkboxes = [];
    for g = 1:length(handles.dataset.GroupNames)
        handles.group_selection_checkboxes(g) = uicontrol('style', 'checkbox', ...
            'parent', handles.groups_display_content_panel, ...
            'units', 'points', ...
            'position', [0 current_ypos total_xdist ydist_per_group], ...
            'string', handles.dataset.GroupNames{g}, ...
            'callback', @groups_analysis_handle_checkbox);
        current_ypos = current_ypos - ydist_per_group;
    end
    
    handles.groups_select_unknown_checkbox = uicontrol('style', 'checkbox', ...
        'parent', handles.groups_display_content_panel, ...
        'units', 'points', ...
        'position', [0 current_ypos total_xdist ydist_per_group], ...
        'string', 'Animals in unknown group', ...
        'callback', @groups_analysis_handle_checkbox);
    
    uicontrol('style', 'text', ...
        'parent', handles.tabNewZero, ...
        'string', 'What would you like to plot?', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', [0.7 0.61 0.2 0.08]);
    handles.groups_select_sessions_dropdown = uicontrol('style', 'popupmenu', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'string', 'Select a plot', ...
        'callback', @group_differences_session_callback, ...
        'parent', handles.tabNewZero, ...
        'units', 'normalized', ...
        'position', [0.7 0.57 0.2 0.08]);
    
    %The following UI controls are for when we are plotting transit times
    handles.groups_select_trials_dropdown_label = uicontrol('style', 'text', ...
        'visible', 'on', ...
        'parent', handles.tabNewZero, ...
        'string', 'Select a subset of trials', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', [0.7 0.52 0.2 0.06]);
    handles.groups_select_trials_dropdown = uicontrol('style', 'popupmenu', ...
        'visible', 'on', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'string', 'Select trials', ...
        'callback', @group_differences_trials_callback, ...
        'parent', handles.tabNewZero, ...
        'units', 'normalized', ...
        'position', [0.7 0.46 0.2 0.08]);
    
    handles.group_select_transit_dropdown_label = uicontrol('style', 'text', ...
        'visible', 'on', ...
        'parent', handles.tabNewZero, ...
        'string', 'Select a transit type', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', [0.7 0.41 0.2 0.06]);
    handles.groups_select_transit_dropdown = uicontrol('style', 'popupmenu', ...
        'visible', 'on', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'string', 'Select a transit type', ...
        'callback', @group_differences_transit_type_callback, ...
        'parent', handles.tabNewZero, ...
        'units', 'normalized', ...
        'position', [0.7 0.35 0.2 0.08]);
    
    %The following UI controls are for when we are plotting differences in
    %event counts
    handles.groups_select_events_dropdown_label = uicontrol('style', 'text', ...
        'visible', 'off', ...
        'parent', handles.tabNewZero, ...
        'string', 'Which events would you like to analyze?', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', [0.7 0.52 0.25 0.06]);
    handles.groups_select_events_dropdown = uicontrol('style', 'popupmenu', ...
        'visible', 'off', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'string', 'Select trials', ...
        'callback', @group_select_events_dropdown_callback, ...
        'parent', handles.tabNewZero, ...
        'units', 'normalized', ...
        'position', [0.7 0.46 0.2 0.08]);
    segments_strings = {'Left Feeder', 'Left Nosepoke', 'Left Prox', ...
        'Right Prox', 'Right Nosepoke', 'Right Feeder', ...
        'All Feeder', 'All Nosepoke', 'All Prox', ...
        'All Events'};
    set(handles.groups_select_events_dropdown, 'string', segments_strings, ...
        'value', 1);
    
    handles.groups_segment_duration_label = uicontrol('style', 'text', ...
        'visible', 'off', ...
        'parent', handles.tabNewZero, ...
        'string', 'Segment duration (seconds):', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', [0.7 0.41 0.2 0.06]);
    handles.groups_segment_duration = uicontrol('style', 'edit', ...
        'visible', 'off', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'string', '30', ...
        'callback', @groups_segment_duration_callback, ...
        'parent', handles.tabNewZero, ...
        'units', 'normalized', ...
        'position', [0.7 0.38 0.2 0.05]);
    
    
    
    uicontrol('style', 'text', ...
        'parent', handles.tabNewZero, ...
        'string', 'Include how many pre-AFC days?', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', [0.7 0.29 0.2 0.06]);
    handles.groups_pre_afc_textbox = uicontrol('style', 'edit', ...
        'parent', handles.tabNewZero, ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'string', '3', ...
        'callback', @group_differences_pre_afc_days_callback, ...
        'position', [0.7 0.23 0.2 0.06]);
    
    handles.sr_checkbox = uicontrol('style', 'checkbox', ...
        'parent', handles.tabNewZero, ...
        'string', 'Suppression rate?', ...
        'fontsize', 10, ...
        'value', 0, ...
        'callback', @sr_checkbox_callback, ...
        'visible', 'off', ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', [0.7 0.15 0.2 0.06]);
    
    handles.sr_mode_label = uicontrol('style', 'text', ...
        'visible', 'off', ...
        'parent', handles.tabNewZero, ...
        'string', 'SR Mode:', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'units', 'normalized', ...
        'position', [0.7 0.05 0.1 0.06]);
    handles.sr_mode = uicontrol('style', 'popupmenu', ...
        'visible', 'off', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'string', 'Select trials', ...
        'callback', @sr_mode_dropdown_callback, ...
        'parent', handles.tabNewZero, ...
        'units', 'normalized', ...
        'position', [0.8 0.05 0.18 0.08]);
    mode_strings = {'All sounds with no averaging', 'Average each sound', 'First sound only', 'Last sound only'};
    set(handles.sr_mode, 'string', mode_strings, ...
        'value', 1);
    
    %Create a button to save the current plot to an Excel file
    uicontrol('style', 'pushbutton', ...
        'fontsize', 10, ...
        'string', 'Save plot data to file', ...
        'callback', @save_plot_data_to_file, ...
        'parent', handles.tabNewZero, ...
        'units', 'normalized', ...
        'position', [0.7 0.01 0.2 0.05]);
    
    %Create an axis to use for between groups analysis and plots
    handles.groups_plot_axis = axes('parent', handles.tabNewZero, ...
        'units', 'normalized', ...
        'outerposition', [0.01 0.1 0.68 0.8], ...
        'position', [0.05 0.1 0.63 0.8]);
    
end

function handles = MakeAllRatsAnalysisTab ( handles )

    uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', 'w', ...
        'horizontalalignment', 'left', ...
        'string', 'Sessions: ', ...
        'parent', handles.tab0, ...
        'units', 'normalized', ...
        'position', [0.01 0.92 0.1 0.05]);
    handles.group_sound_popupmenu = uicontrol('style', 'popupmenu', ...
        'fontsize', 12, ...
        'horizontalalignment', 'left', ...
        'string', 'Select a sound', ...
        'callback', @group_sound_callback, ...
        'parent', handles.tab0, ...
        'units', 'normalized', ...
        'position', [0.12 0.92 0.2 0.05]);
    
    uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', 'w', ...
        'horizontalalignment', 'left', ...
        'string', 'Trials: ', ...
        'parent', handles.tab0, ...
        'units', 'normalized', ...
        'position', [0.33 0.92 0.07 0.05]);
    handles.group_mode_popupmenu = uicontrol('style', 'popupmenu', ...
        'fontsize', 12, ...
        'horizontalalignment', 'left', ...
        'string', 'Select a mode', ...
        'callback', @group_mode_callback, ...
        'parent', handles.tab0, ...
        'units', 'normalized', ...
        'position', [0.41 0.92 0.2 0.05]);
    
    uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', 'w', ...
        'horizontalalignment', 'left', ...
        'string', 'Transit type: ', ...
        'parent', handles.tab0, ...
        'units', 'normalized', ...
        'position', [0.63 0.92 0.12 0.05]);
    handles.group_transit_type_popupmenu = uicontrol('style', 'popupmenu', ...
        'fontsize', 12, ...
        'horizontalalignment', 'left', ...
        'string', 'Select a transit type', ...
        'callback', @group_transit_type_callback, ...
        'parent', handles.tab0, ...
        'units', 'normalized', ...
        'position', [0.76 0.92 0.2 0.05]);
    
    handles.group_axis = axes('parent', handles.tab0, ...
        'units', 'normalized', ...
        'position', [0.1 0.1 0.8 0.8]);
    
    %Create UI elements in the second tab (for viewing a rat)
    uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', 'w', ...
        'horizontalalignment', 'left', ...
        'string', 'Sessions: ', ...
        'parent', handles.tab1, ...
        'units', 'normalized', ...
        'position', [0.01 0.92 0.1 0.05]);
    handles.rat_sound_popupmenu = uicontrol('style', 'popupmenu', ...
        'fontsize', 12, ...
        'horizontalalignment', 'left', ...
        'string', 'Select a sound', ...
        'callback', @rat_sound_callback, ...
        'parent', handles.tab1, ...
        'units', 'normalized', ...
        'position', [0.12 0.92 0.2 0.05]);
    
    uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', 'w', ...
        'horizontalalignment', 'left', ...
        'string', 'Trials: ', ...
        'parent', handles.tab1, ...
        'units', 'normalized', ...
        'position', [0.33 0.92 0.07 0.05]);
    handles.rat_mode_popupmenu = uicontrol('style', 'popupmenu', ...
        'fontsize', 12, ...
        'horizontalalignment', 'left', ...
        'string', 'Select a mode', ...
        'callback', @rat_mode_callback, ...
        'parent', handles.tab1, ...
        'units', 'normalized', ...
        'position', [0.41 0.92 0.2 0.05]);
    
    uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', 'w', ...
        'horizontalalignment', 'left', ...
        'string', 'Transit type: ', ...
        'parent', handles.tab1, ...
        'units', 'normalized', ...
        'position', [0.63 0.92 0.12 0.05]);
    handles.rat_transit_type_popupmenu = uicontrol('style', 'popupmenu', ...
        'fontsize', 12, ...
        'horizontalalignment', 'left', ...
        'string', 'Select a transit type', ...
        'callback', @rat_transit_type_callback, ...
        'parent', handles.tab1, ...
        'units', 'normalized', ...
        'position', [0.76 0.92 0.2 0.05]);
    
    handles.rat_axis = axes('parent', handles.tab1, ...
        'units', 'normalized', ...
        'position', [0.1 0.1 0.8 0.8]);

end

function handles = MakeSessionsAnalysisTab ( handles )

    uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', handles.fig_background_color, ...
        'horizontalalignment', 'left', ...
        'string', 'Transit: ', ...
        'parent', handles.tab2, ...
        'units', 'normalized', ...
        'position', [0.02 0.92 0.1 0.05]);
    handles.session_transit_type_popupmenu = uicontrol('style', 'popupmenu', ...
        'fontsize', 12, ...
        'horizontalalignment', 'left', ...
        'string', 'Select a transit type', ...
        'callback', @session_transit_type_callback, ...
        'parent', handles.tab2, ...
        'units', 'normalized', ...
        'position', [0.12 0.92 0.2 0.05]);
    
    handles.session_compare_left_right_checkbox = uicontrol('style', 'checkbox', ...
        'fontsize', 12, ...
        'fontweight', 'bold', ...
        'string', 'Compare left and right trials?', ...
        'value',0, ...
        'units', 'normalized', ...
        'position', [0.35 0.92 0.25 0.05], ...
        'parent', handles.tab2, ...
        'callback', @session_compare_left_right_callback);
    
    
    handles.session_axis = axes('parent', handles.tab2, ...
        'units', 'normalized', ...
        'outerposition', [0.01 0.1 0.8 0.8], ...
        'position', [0.05 0.1 0.6 0.8]);
    
    handles.sessions_slider = uicontrol('style', 'slider',...
        'Min',1, ...
        'Max',1, ...
        'Value',1, ...
        'units', 'normalized', ...
        'Position', [0.05 0.01 0.6 0.04],...
        'parent', handles.tab2, ...
        'Callback', @sessions_slider_callback); 
    
    %Session statistics panel and all UI pieces associated with session
    %statistics
    handles.session_stats_panel = uipanel(...
        'parent', handles.tab2, ...
        'title', 'Session Statistics', ...
        'fontsize', 12, ...
        'units', 'normalized', ...
        'position', [0.66 0.02 0.33 0.96]);
    
    uicontrol('style', 'text', ...
        'fontsize', 10, ...
        'backgroundcolor', handles.fig_background_color, ...
        'horizontalalignment', 'left', ...
        'string', 'Should some trials be excluded from statistics?', ...
        'parent', handles.session_stats_panel, ...
        'units', 'normalized', ...
        'position', [0.05 0.92 0.95 0.05]);
    handles.session_stats_exclusion_method_combo_box = uicontrol('style', 'popupmenu', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'string', '', ...
        'callback', @session_stats_exclusion_callback, ...
        'parent', handles.session_stats_panel, ...
        'units', 'normalized', ...
        'position', [0.05 0.84 0.90 0.08]);
    handles.session_stats_before_criterion_label = uicontrol('style', 'text', ...
        'fontsize', 10, ...
        'backgroundcolor', handles.fig_background_color, ...
        'horizontalalignment', 'left', ...
        'string', 'Start', ...
        'parent', handles.session_stats_panel, ...
        'units', 'normalized', ...
        'position', [0.05 0.79 0.95 0.05]);
    handles.session_stats_before_criterion = uicontrol('style', 'edit', ...
        'parent', handles.session_stats_panel, ...
        'units', 'normalized', ...
        'fontsize', 10, ...
        'enable', 'off', ...
        'horizontalalignment', 'left', ...
        'callback', @edit_start_exclusion_criteria, ...
        'position', [0.05 0.74 0.90 0.05]);
    handles.session_stats_after_criterion_label = uicontrol('style', 'text', ...
        'fontsize', 10, ...
        'backgroundcolor', handles.fig_background_color, ...
        'horizontalalignment', 'left', ...
        'string', 'End', ...
        'parent', handles.session_stats_panel, ...
        'units', 'normalized', ...
        'position', [0.05 0.68 0.95 0.05]);
    handles.session_stats_after_criterion = uicontrol('style', 'edit', ...
        'parent', handles.session_stats_panel, ...
        'units', 'normalized', ...
        'fontsize', 10, ...
        'enable', 'off', ...
        'horizontalalignment', 'left', ...
        'callback', @edit_end_exclusion_criteria, ...
        'position', [0.05 0.63 0.90 0.05]);
    
    handles.session_stats_textbox = uicontrol('style', 'edit', ...
        'parent', handles.session_stats_panel, ...
        'units', 'normalized', ...
        'position', [0.05 0.05 0.90 0.5], ...
        'horizontalalignment', 'left', ...
        'Max', 2, ...
        'Min', 0);
    %The following lines make the textbox inactive, but still allow
    %copy/pasting from the edit box
    warning('off');
    jScrollView = findjobj(handles.session_stats_textbox,'-nomenu');
    jEditbox = handle(jScrollView.getViewport.getView, 'CallbackProperties');
    set(jEditbox,'Editable',0);
    warning('on');
    

end

function handles = MakeTrialsAnalysisTab ( handles )

    handles.trials_use_raw_data_checkbox = uicontrol('style', 'checkbox', ...
        'fontsize', 12, ...
        'fontweight', 'bold', ...
        'string', 'Plot raw event data?', ...
        'value',0, ...
        'units', 'normalized', ...
        'position', [0.02 0.92 0.4 0.05], ...
        'parent', handles.tab3, ...
        'callback', @trials_use_raw_data_callback);
    handles.trials_use_time_as_x_axis_checkbox = uicontrol('style', 'checkbox', ...
        'fontsize', 12, ...
        'fontweight', 'bold', ...
        'string', 'Use time as x-axis?', ...
        'value',0, ...
        'units', 'normalized', ...
        'position', [0.42 0.92 0.35 0.05], ...
        'parent', handles.tab3, ...
        'callback', @trials_use_time_as_x_axis_callback);
    
    handles.current_trial_label = uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', 'w', ...
        'horizontalalignment', 'left', ...
        'string', '', ...
        'parent', handles.tab3, ...
        'units', 'normalized', ...
        'position', [0.8 0.92 0.05 0.05]);
    uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', 'w', ...
        'horizontalalignment', 'left', ...
        'string', '/', ...
        'parent', handles.tab3, ...
        'units', 'normalized', ...
        'position', [0.86 0.92 0.01 0.05]);
    handles.total_trials_label = uicontrol('style', 'text', ...
        'fontweight', 'bold', ...
        'fontsize', 12, ...
        'backgroundcolor', 'w', ...
        'horizontalalignment', 'left', ...
        'string', '', ...
        'parent', handles.tab3, ...
        'units', 'normalized', ...
        'position', [0.87 0.92 0.05 0.05]);
    
    handles.trials_axis = axes('parent', handles.tab3, ...
        'units', 'normalized', ...
        'outerposition', [0.1 0.1 0.8 0.8]);
    
    handles.trials_slider = uicontrol('style', 'slider',...
        'Min',1, ...
        'Max',1, ...
        'Value',1, ...
        'units', 'normalized', ...
        'Position', [0.1 0.01 0.8 0.04],...
        'parent', handles.tab3, ...
        'Callback', @trials_slider_callback); 
    

end

function handles = MakeSegmentsAnalysisTab ( handles )

    handles.segments_selection_type_box = uicontrol('style', 'popupmenu', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'string', '', ...
        'callback', @segments_selection_box_callback, ...
        'parent', handles.tab4, ...
        'units', 'normalized', ...
        'position', [0.05 0.84 0.6 0.08]);
    
    segments_strings = {'Left Feeder', 'Left Nosepoke', 'Left Prox', ...
        'Right Prox', 'Right Nosepoke', 'Right Feeder', ...
        'All Feeder', 'All Nosepoke', 'All Prox', ...
        'All Events'};
    set(handles.segments_selection_type_box, 'string', segments_strings, ...
        'value', 1);
    
    uicontrol('style', 'text', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'string', 'Duration of segments (seconds): ', ...
        'parent', handles.tab4, ...
        'units', 'normalized', ...
        'position', [0.66 0.90 0.2 0.05]);
    handles.single_rat_segment_length = uicontrol('style', 'edit', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'string', '', ...
        'callback', @single_rat_segment_length_changed, ....
        'parent', handles.tab4, ...
        'units', 'normalized', ...
        'position', [0.66 0.87 0.1 0.05]);
    set(handles.single_rat_segment_length, 'string', '30');
    
    handles.single_rat_single_session_sound_type_label = uicontrol('style', 'text', ...
        'fontsize', 10, ...
        'horizontalalignment', 'left', ...
        'string', 'Sound type goes here', ...
        'parent', handles.tab4, ...
        'units', 'normalized', ...
        'position', [0.48 0.75 0.1 0.08]);
    
    handles.segments_plot = axes('parent', handles.tab4, ...
        'units', 'normalized', ...
        'outerposition', [0.1 0.05 0.8 0.75]);

end

function handles = PopulateGUI ( handles )

    %Get the list of rat names
    handles.rat_names = {handles.dataset.Rats.RatName};
    
    %Add group names to each rat name
    for r = 1:length(handles.rat_names)
        g = handles.dataset.Rats(r).Group;
        g_name = 'Unknown Group';
        if (~isempty(handles.dataset.GroupNames) && g <= length(handles.dataset.GroupNames))
            g_name = handles.dataset.GroupNames{g};
        end
        
        handles.rat_names{r} = [handles.rat_names{r} ' (' g_name ')'];
    end
    
    %Set the current rat and populate the list of rats in the drop-down box
    handles.current_rat = 1;
    set(handles.rat_combo_box, 'string', handles.rat_names, ...
        'value', handles.current_rat);
    
    %Populate the list of sessions, and select a default session
    handles = PopulateSessionsBox(handles);
    
    %Define strings for the other menus
    handles.mode_strings = {'FirstSound', 'LastSound', 'AllSounds', 'AllTrials', 'FirstSoundMinusLastSound'};
    handles.mode_menu_strings = {'First sound trial of each session', ...
        'Last sound trial of each session', ...
        'Average of all sound trials from each session', ...
        'Average of all trials from each session', ...
        'First sound trial of session minus the last sound trial of previous session'};
    handles.transit_strings = {'NosepokeToNosepokeTransitTime', ...
        'NosepokeToFirstProxTransitTime', ...
        'NosepokeToSecondProxTransitTime', ...
        'FirstProxToSecondProxTransitTime', ...
        'FirstProxToSecondNosepokeTransitTime', ...
        'SecondProxToSecondNosepokeTransitTime', ...
        'FirstProxEnterToSecondProxEnterTransitTime', ...
        'TOTAL_FEEDS', ...
        'TOTAL_NOSEPOKES', ...
        'LEFT_NOSEPOKES', ...
        'RIGHT_NOSEPOKES', ...
        'LEFT_FEEDS', ...
        'RIGHT_FEEDS'};
    handles.sound_strings = {'All sessions', ...
        'Training sessions', ...
        'Machine gun sessions only', ...
        'Twitter sessions only', ...
        '9 khz tone sessions only', ...
        'Silent sessions only', ...
        'Compare sessions of different sounds', ...
        'Compare sessions by ratio'};
    handles.group_sound_strings = {'Compare sessions of different sounds', ...
        'Compare sessions by ratio', ...
        'Machine gun sessions only', ...
        'Twitter sessions only', ...
        '9 khz tone sessions only', ...
        'Silent sessions only'};
    handles.groups_analysis_plot_type_strings = {'Transit times on conditioned sound', 'Event counts'};
    
    handles.session_stats_exclusion_strings = {'No exclusions', ...
        'Exclude based on raw trial time', ...
        'Exclude based on raw trial number', ...
        'Exclude based on relative time', ...
        'Exclude based on relative trial number'};
    handles.session_stats_exclusion_start_strings = {'Start', ...
        'Trials with start times <= X minutes', ...
        'Trials with trial number <= X', ...
        'Trials beginning >= X minutes before first sound', ...
        'Trials beginning >= X trials before first sound'};
    handles.session_stats_exclusion_ending_strings = {'End', ...
        'Trials with start times >= X minutes', ...
        'Trials with trial number >= X', ...
        'Trials beginning >= X minutes after last sound', ...
        'Trials beginning >= X trials after last sound' ... 
        };
    
    %Groups of rats
    handles.groups_select_sessions = 1;
    handles.groups_select_trials = 3;
    handles.groups_select_transit = 5;
    
    %All rats
    handles.group_current_mode = 1;
    handles.group_transit = 5;
    handles.group_sound = 1;
    
    %Rat
    handles.current_mode = 1;
    handles.rat_transit = 5;
    handles.rat_sound = 1;
    
    %Session
    handles.compare_left_right = 0;
    handles.session_transit = 5;
    handles.stats_exclusion_criteria = 1;
    
    %Trial
    handles.raw_data = 0;
    handles.use_time = 1;
    handles.current_trial = 1;
    
    
    %Groups of rats
    
    set(handles.groups_select_sessions_dropdown, 'string', handles.groups_analysis_plot_type_strings, ...
        'value', handles.groups_select_sessions);
    set(handles.groups_select_trials_dropdown, 'string', handles.mode_menu_strings, ...
        'value', handles.groups_select_trials);
    set(handles.groups_select_transit_dropdown, 'string', handles.transit_strings, ...
        'value', handles.groups_select_transit);
    
    %All rats
    set(handles.group_mode_popupmenu, 'string', handles.mode_menu_strings, ...
        'value', handles.group_current_mode);
    set(handles.group_transit_type_popupmenu, 'string', handles.transit_strings, ...
        'value', handles.group_transit);
    set(handles.group_sound_popupmenu, 'string', handles.group_sound_strings, ...
        'value', handles.group_sound);
    
    %Rat
    set(handles.rat_mode_popupmenu, 'string', handles.mode_menu_strings, ...
        'value', handles.current_mode);
    set(handles.rat_transit_type_popupmenu, 'string', handles.transit_strings, ...
        'value', handles.rat_transit);
    set(handles.rat_sound_popupmenu, 'string', handles.sound_strings, ...
        'value', handles.rat_sound);
    
    %Session
    set(handles.session_transit_type_popupmenu, 'string', handles.transit_strings, ...
        'value', handles.session_transit);
    set(handles.session_compare_left_right_checkbox, 'value', handles.compare_left_right);
    
    set(handles.session_stats_exclusion_method_combo_box, 'string', handles.session_stats_exclusion_strings, ...
        'value', handles.stats_exclusion_criteria);
    set(handles.session_stats_before_criterion_label, 'string', handles.session_stats_exclusion_start_strings{handles.stats_exclusion_criteria});
    set(handles.session_stats_after_criterion_label, 'string', handles.session_stats_exclusion_ending_strings{handles.stats_exclusion_criteria});
    
    enable_stats_edit_boxes = 'off';
    if (handles.stats_exclusion_criteria > 1)
        enable_stats_edit_boxes = 'on';
    end
    set(handles.session_stats_before_criterion, 'enable', enable_stats_edit_boxes);
    set(handles.session_stats_after_criterion, 'enable', enable_stats_edit_boxes);
    
    
    
    %Trial
    set(handles.trials_use_raw_data_checkbox, 'value', handles.raw_data);
    set(handles.trials_use_time_as_x_axis_checkbox, 'value', handles.use_time);
    set(handles.current_trial_label, 'string', num2str(handles.current_trial));
    set(handles.total_trials_label, 'string', num2str(handles.total_trials));
    
    plot_group_data(handles);
    plot_rat_data(handles);
    plot_session_data(handles);
    plot_trial_data(handles);
    
    set(handles.segments_selection_type_box, 'value', 1);
    plot_segment_data(handles);
    
    
    guidata(handles.mainfig, handles);
    
end

function handles = PopulateSessionsBox ( handles )
    %Get session times for the rat
    session_times = [handles.dataset.Rats(handles.current_rat).Sessions.StartTime];
    session_strings = {};
    for s = 1:length(handles.dataset.Rats(handles.current_rat).Sessions)
        session_strings{s} = ['(Day ' num2str(s) ') ' datestr(session_times(s))];
    end
    
    handles.current_session = 1;
    
    %Populate the sessions drop-down box
    set(handles.session_combo_box, 'string', session_strings, ...
        'value', handles.current_session);
    
    handles = SetTrials(handles);
    
    %Define limits and necessary variables for the sessions slider
    handles.total_sessions = 0;
    if (isempty(handles.dataset.Rats(handles.current_rat).Sessions))
        handles.total_sessions = 0;
        handles.current_session = 0;
        
        set(handles.sessions_slider, 'enable', 'off');
    else
        set(handles.sessions_slider, 'enable', 'on');
        
        handles.total_sessions = length(handles.dataset.Rats(handles.current_rat).Sessions);
        sliderStep = [1, 1] / (handles.total_sessions - 1);
        
        enable = 'on';
        if (handles.total_sessions < 2)
            enable = 'off';
            sliderStep = [1, 1];
        end
        
        set(handles.sessions_slider, 'min', 1, ...
            'max', handles.total_sessions, ...
            'value', handles.current_session, ...
            'sliderstep', sliderStep, ...
            'enable', enable);
    end
    
    guidata(handles.mainfig, handles);
    
end

function handles = SetTrials ( handles )

    session = handles.dataset.Rats(handles.current_rat).Sessions(handles.current_session);
    
    if (isempty(session.Trials))
        handles.total_trials = 0;
        handles.current_trial = 0;
        
        set(handles.trials_slider, 'enable', 'off');
        set(handles.current_trial_label, 'string', num2str(handles.current_trial));
        set(handles.total_trials_label, 'string', num2str(handles.total_trials));
    else
        set(handles.trials_slider, 'enable', 'on');
        
        handles.current_trial = 1;
        trial_count = length(session.Trials);
        handles.total_trials = trial_count;
        sliderStep = [1, 1] / (trial_count - 1);

        enable = 'on';
        if (trial_count < 2)
            enable = 'off';
            sliderStep = [1, 1];
        end

        set(handles.trials_slider, 'min', 1, ...
            'max', trial_count, ...
            'value', handles.current_trial, ...
            'sliderstep', sliderStep, ...
            'enable', enable);    
        set(handles.current_trial_label, 'string', num2str(handles.current_trial));
        set(handles.total_trials_label, 'string', num2str(handles.total_trials));
    end
    
    guidata(handles.mainfig, handles);
    
end

%% Stuff to plot data across groups of rats

function groups_display_slider_callback (hObject, eventdata)

    handles = guidata(hObject);
    
    slider_value = round(get(hObject,'Value'));
    
    ychange = (10 - slider_value) * handles.group_content_travel_step;
    ypos = handles.group_content_lower_ypos + ychange;
    
    current_content_pos = get(handles.groups_display_content_panel, 'position');
    current_content_pos(2) = ypos;
    set(handles.groups_display_content_panel, 'position', current_content_pos);
    
    guidata(hObject, handles);

end

function groups_analysis_handle_checkbox (hObject, eventdata)

    handles = guidata(hObject);

    checkbox_value = get(hObject, 'value');
    checkbox_name = get(hObject, 'string');
    
    %groups_select_all_checkbox
    %group_selection_checkboxes
    %groups_select_unknown_checkbox
    
    if (strcmpi(checkbox_name, 'Show all groups') == 1)
     
        for i = 1:length(handles.group_selection_checkboxes)
            set(handles.group_selection_checkboxes(i), 'value', checkbox_value);
        end
        set(handles.groups_select_unknown_checkbox, 'value', checkbox_value);
    
    else
        
        show_all_checkbox_value = get(handles.groups_select_all_checkbox, 'value');
        if (checkbox_value == 0 && show_all_checkbox_value == 1)
            set(handles.groups_select_all_checkbox, 'value', 0);
        end
        
    end

    plot_groups_analysis(handles);
    
    guidata(hObject, handles);

end

function group_differences_session_callback (hObject, eventdata)
    handles = guidata(hObject);
    
    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    handles.groups_select_sessions = index_selected;
    
    if (handles.groups_select_sessions == 1)
        
        set(handles.groups_select_trials_dropdown_label, 'visible', 'on');
        set(handles.groups_select_trials_dropdown, 'visible', 'on');
        set(handles.group_select_transit_dropdown_label, 'visible', 'on');
        set(handles.groups_select_transit_dropdown, 'visible', 'on');
        
        set(handles.groups_select_events_dropdown_label, 'visible', 'off');
        set(handles.groups_select_events_dropdown, 'visible', 'off');
        set(handles.groups_segment_duration_label, 'visible', 'off');
        set(handles.groups_segment_duration, 'visible', 'off');
        set(handles.sr_checkbox, 'visible', 'off');
        
    else
        
        set(handles.groups_select_trials_dropdown_label, 'visible', 'off');
        set(handles.groups_select_trials_dropdown, 'visible', 'off');
        set(handles.group_select_transit_dropdown_label, 'visible', 'off');
        set(handles.groups_select_transit_dropdown, 'visible', 'off');
        
        set(handles.groups_select_events_dropdown_label, 'visible', 'on');
        set(handles.groups_select_events_dropdown, 'visible', 'on');
        set(handles.groups_segment_duration_label, 'visible', 'on');
        set(handles.groups_segment_duration, 'visible', 'on');
        set(handles.sr_checkbox, 'visible', 'on');
        
    end
    
    plot_groups_analysis(handles);
    
    guidata(hObject, handles);
end

function group_differences_trials_callback (hObject, eventdata)
    handles = guidata(hObject);
    
    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    handles.groups_select_trials = index_selected;
    plot_groups_analysis(handles);
    
    guidata(hObject, handles);
end

function group_differences_transit_type_callback (hObject, eventdata)
    handles = guidata(hObject);
    
    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    handles.groups_select_transit = index_selected;
    plot_groups_analysis(handles);
    
    guidata(hObject, handles);
end

function group_differences_pre_afc_days_callback (hObject, eventdata)
    handles = guidata(hObject);
    
    plot_groups_analysis(handles);
    
    guidata(hObject, handles);
end

function sr_checkbox_callback (hObject, eventdata)
    handles = guidata(hObject);
    
    sr_checkbox_value = get(handles.sr_checkbox, 'value');
    if (sr_checkbox_value)
        set(handles.sr_mode, 'visible', 'on');
        set(handles.sr_mode_label, 'visible', 'on');
    else
        set(handles.sr_mode, 'visible', 'off');
        set(handles.sr_mode_label, 'visible', 'off');
    end
    
    plot_groups_analysis(handles);
    
    guidata(hObject, handles);
end

function sr_mode_dropdown_callback (hObject, eventdata)
    handles = guidata(hObject);
    
    plot_groups_analysis(handles);
    
    guidata(hObject, handles);
end

function groups_segment_duration_callback (hObject, eventdata)
    handles = guidata(hObject);
    plot_groups_analysis(handles);
    guidata(hObject, handles);
end

function group_select_events_dropdown_callback (hObject, eventdata)
    handles = guidata(hObject);
    plot_groups_analysis(handles);
    guidata(hObject, handles);
end

function plot_groups_analysis ( handles )

    %Get how many pre-AFC days need to be plotted
    pre_afc_string = get(handles.groups_pre_afc_textbox, 'string');
    is_string_numeric = all(isstrprop(pre_afc_string, 'digit'));
    pre_afc_days = 0;
    if (is_string_numeric)
        pre_afc_days = str2double(pre_afc_string);
    end

    %Clear the plotting axis for the next plot
    cla(handles.groups_plot_axis, 'reset');
    
    %Figure out which groups to include
    groups_to_use = [];
    for i = 1:length(handles.group_selection_checkboxes)
        checkbox_value = get(handles.group_selection_checkboxes(i), 'value');
        groups_to_use = [groups_to_use checkbox_value];
    end
    unsorted_animals = get(handles.groups_select_unknown_checkbox, 'value');
    groups_to_use = [groups_to_use unsorted_animals];
    group_numbers = find(groups_to_use == 1);
    
    %See what figure type we want to plot
    figure_type_index = handles.groups_select_sessions;
    
    if (figure_type_index == 1)
        %Get indices of the various drop-down boxes
        transit_type_index = handles.groups_select_transit;
        trials_to_use_index = handles.groups_select_trials;
        
        %Convert these indices to the proper values to pass to the plotting
        %function
        transit_string = handles.transit_strings{transit_type_index};
        trials_to_use_string = handles.mode_strings{trials_to_use_index};

        handles.dataset.PlotData2('TransitType', transit_string, ...
            'SelectTrials', trials_to_use_string, ...
            'Figure', handles.groups_plot_axis, ...
            'DaysBeforeAFC', pre_afc_days, ...
            'Groups', group_numbers);
    else
        
        which_segment_type = get(handles.groups_select_events_dropdown, 'value');
        segment_length = str2double(get(handles.groups_segment_duration, 'string'));
        use_sr = get(handles.sr_checkbox, 'value');

        %Get the sr mode
        sr_mode_to_use = get(handles.sr_mode, 'value');
        sr_mode_string = '';
        switch (sr_mode_to_use)
            case 1
                sr_mode_string = 'AllSoundsNoAveraging';
            case 2
                sr_mode_string = 'AverageOfAllSounds';
            case 3
                sr_mode_string = 'FirstSound';
            case 4
                sr_mode_string = 'LastSound';
        end
                
        
        property_name = 'TotalLeftFeederEvents';
        switch (which_segment_type)
            case 1
                property_name = 'TotalLeftFeederEvents';
            case 2
                property_name = 'TotalLeftNosepokeEvents';
            case 3
                property_name = 'TotalLeftProxEvents';
            case 4
                property_name = 'TotalRightProxEvents';
            case 5
                property_name = 'TotalRightNosepokeEvents';
            case 6
                property_name = 'TotalRightFeederEvents';
            case 7
                property_name = 'TotalFeederEvents';
            case 8
                property_name = 'TotalNosepokeEvents';
            case 9
                property_name = 'TotalProxEvents';
            case 10
                property_name = 'TotalEvents';
        end
        
        if (use_sr && sr_mode_to_use > 1)        
            handles.dataset.PlotData2('DaysBeforeAFC', pre_afc_days, ...
                'PlotIndividualAnimals', 1, ...
                'SegmentType', property_name, ...
                'SegmentLength', segment_length, ...
                'Groups', group_numbers, ...
                'SelectTrials', sr_mode_string, ...
                'Figure', handles.groups_plot_axis, ...
                'SuppressionRate', use_sr, ...
                'GrabSegments', 1);
        else
            handles.dataset.PlotData3('DaysBeforeAFC', pre_afc_days, ...
                'SegmentType', property_name, ...
                'SegmentLength', segment_length, ...
                'Groups', group_numbers, ...
                'SelectTrials', sr_mode_string, ...
                'Figure', handles.groups_plot_axis, ...
                'SuppressionRate', use_sr);    
        end
        
    end
    
end

function save_plot_data_to_file (hObject, eventdata)

    global data_table;
    global sound_table;
    global fear_table;
    
    [file path] = uiputfile('*.xls');
    writetable(data_table, [path file], 'Sheet', 1);
    writetable(sound_table, [path file], 'Sheet', 2);
    writetable(fear_table, [path file], 'Sheet', 3);

end

%% Stuff to plot all rat data

function group_mode_callback (hObject, eventdata)

    handles = guidata(hObject);

    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    item_selected = items{index_selected};
    
    handles.group_current_mode = index_selected;
    
    plot_group_data(handles);
    
    guidata(hObject, handles);

end

function group_transit_type_callback (hObject, eventdata)

    handles = guidata(hObject);

    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    item_selected = items{index_selected};
    
    handles.group_transit = index_selected;
    
    plot_group_data(handles);
    
    guidata(hObject, handles);

end

function group_sound_callback (hObject, eventdata)

    handles = guidata(hObject);

    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    item_selected = items{index_selected};
    
    handles.group_sound = index_selected;
    
    plot_group_data(handles);
    
    guidata(hObject, handles);

end

function plot_group_data ( handles )

    group_transit_string = handles.transit_strings{handles.group_transit};
    mode_string = handles.mode_strings{handles.group_current_mode};
    
    graph_type = PTSD_Utility.DatasetGraphTypeCompareAllSounds;
    sound = PTSD_EventType.UNKNOWN_EVENT;
    
    if (handles.group_sound == 1)
        %multiple sound compared to each other
        graph_type = PTSD_Utility.DatasetGraphTypeCompareAllSounds;
    elseif (handles.group_sound == 2)
        %ratios of multiple sounds
        graph_type = PTSD_Utility.DatasetGraphTypeCompareRatios;
    elseif (handles.group_sound == 3)
        %machine gun
        sound = PTSD_EventType.MACHINE_GUN;
        graph_type = PTSD_Utility.DatasetGraphTypeSingleSound;
    elseif (handles.group_sound == 4)
        %twitter
        sound = PTSD_EventType.TWITTER;
        graph_type = PTSD_Utility.DatasetGraphTypeSingleSound;
    elseif (handles.group_sound == 5)
        %9khz tone
        sound = PTSD_EventType.NINE_KHZ;    
        graph_type = PTSD_Utility.DatasetGraphTypeSingleSound;
    elseif (handles.group_sound == 6)
        %silent
        sound = PTSD_EventType.SILENT_SESSION;    
        graph_type = PTSD_Utility.DatasetGraphTypeSingleSound;
    end
    
    cla(handles.group_axis, 'reset');
    
    handles.dataset.PlotData('TransitType', group_transit_string, ...
        'Mode', mode_string, ...
        'Sound', sound, ...
        'GraphType', graph_type, ...
        'Figure', handles.group_axis);
    
end

%% Stuff to plot rat data

function rat_select_callback (hObject, eventdata)

    handles = guidata(hObject);

    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    item_selected = items{index_selected};
    
    handles.current_rat = index_selected;
    handles.current_session = 1;
    handles.current_trial = 1;
    handles = PopulateSessionsBox(handles);
    
    plot_rat_data(handles);
    plot_session_data(handles);
    plot_trial_data(handles);
    
    %set(handles.segments_selection_type_box, 'value', 1);
    plot_segment_data(handles);
    
    
    guidata(hObject, handles);
    
end

function rat_mode_callback (hObject, eventdata)

    handles = guidata(hObject);

    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    item_selected = items{index_selected};
    
    handles.current_mode = index_selected;
    
    plot_rat_data(handles);
    
    guidata(hObject, handles);

end

function rat_transit_type_callback (hObject, eventdata)

    handles = guidata(hObject);

    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    item_selected = items{index_selected};
    
    handles.rat_transit = index_selected;
    
    plot_rat_data(handles);
    
    guidata(hObject, handles);

end

function rat_sound_callback (hObject, eventdata)

    handles = guidata(hObject);

    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    item_selected = items{index_selected};
    
    handles.rat_sound = index_selected;
    
    plot_rat_data(handles);
    
    guidata(hObject, handles);

end

function plot_rat_data ( handles )

    rat_transit_string = handles.transit_strings{handles.rat_transit};
    mode_string = handles.mode_strings{handles.current_mode};
    
    graph_type = PTSD_Utility.RatGraphTypeSingleLine;
    sound = PTSD_EventType.UNKNOWN_EVENT;
    include_shaping_data = 0;
    
    if (handles.rat_sound == 1)
        sound = PTSD_EventType.UNKNOWN_EVENT; 
        include_shaping_data = 1;
    elseif (handles.rat_sound == 2)
        sound = PTSD_EventType.UNKNOWN_EVENT; 
    elseif (handles.rat_sound == 3)
        sound = PTSD_EventType.MACHINE_GUN;
    elseif (handles.rat_sound == 4)
        sound = PTSD_EventType.TWITTER;
    elseif (handles.rat_sound == 5)
        sound = PTSD_EventType.NINE_KHZ;    
    elseif (handles.rat_sound == 6)
        sound = PTSD_EventType.SILENT_SESSION;
    elseif (handles.rat_sound == 7)
        graph_type = PTSD_Utility.RatGraphTypeMultipleLines;
    else
        graph_type = PTSD_Utility.RatGraphTypeRatios;
    end
    
    cla(handles.rat_axis, 'reset');
    
    rat = handles.dataset.Rats(handles.current_rat);
    rat.PlotRat('TransitType', rat_transit_string, ...
        'Mode', mode_string, ...
        'Sound', sound, ...
        'IncludeShapingData', include_shaping_data, ...
        'GraphType', graph_type, ...
        'Figure', handles.rat_axis);
    
    [stat, p] = rat.GetRatStats('Statistic', PTSD_Utility.RatStatsTTest, ...
        'Mode', mode_string, ...
        'Sound', sound, ...
        'IncludeShapingData', include_shaping_data, ...
        'TransitType', rat_transit_string);
    
    sound_string = 'all sessions';
    if (sound > 0)
        sound_string = PTSD_EventType.event_display_strings{sound};
    end
    
    disp([rat.RatName ', t-test of ' sound_string ' vs silent sessions, p = ' num2str(p)]);
    
end

%% Stuff to plot session data

function sessions_slider_callback (hObject, eventdata)

    handles = guidata(hObject);
    
    slider_value = get(hObject, 'Value');
    handles.current_session = round(slider_value);
    
    %Update the combo-box
    set(handles.session_combo_box, 'Value', handles.current_session);
    
    %Plot the session
    handles.current_trial = 1;
    handles = SetTrials(handles);
    
    plot_session_data(handles);
    
    set(handles.segments_selection_type_box, 'value', 1);
    plot_segment_data(handles, 1);
    
    plot_trial_data(handles);
    
    guidata(hObject, handles);

end

function session_select_callback (hObject, eventdata)
    handles = guidata(hObject);

    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    item_selected = items{index_selected};
    
    handles.current_session = index_selected;
    
    %Update the slider
    set(handles.sessions_slider, 'Value', handles.current_session);
    
    %set(handles.segments_selection_type_box, 'value', 1);
    
    %Plot the session
    handles.current_trial = 1;
    handles = SetTrials(handles);
    
    plot_session_data(handles);
    plot_segment_data(handles);
    plot_trial_data(handles);
    
    guidata(hObject, handles);
end

function session_transit_type_callback (hObject, eventdata)

    handles = guidata(hObject);

    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    item_selected = items{index_selected};
    
    handles.session_transit = index_selected;
    
    plot_session_data(handles);
    
    guidata(hObject, handles);

end

function session_compare_left_right_callback (hObject, eventdata)

    handles = guidata(hObject);

    handles.compare_left_right = get(hObject, 'value');
    
    plot_session_data(handles);
    
    guidata(hObject, handles);

end

function session_stats_exclusion_callback (hObject, eventdata)

    handles = guidata(hObject);
    
    items = get(hObject,'String');
    index_selected = get(hObject,'Value');
    %item_selected = items{index_selected};
    
    handles.stats_exclusion_criteria = index_selected;
    set(handles.session_stats_before_criterion_label, 'string', handles.session_stats_exclusion_start_strings{handles.stats_exclusion_criteria});
    set(handles.session_stats_after_criterion_label, 'string', handles.session_stats_exclusion_ending_strings{handles.stats_exclusion_criteria});
    
    enable_stats_edit_boxes = 'off';
    if (handles.stats_exclusion_criteria > 1)
        enable_stats_edit_boxes = 'on';
    end
    set(handles.session_stats_before_criterion, 'enable', enable_stats_edit_boxes);
    set(handles.session_stats_after_criterion, 'enable', enable_stats_edit_boxes);
    
    plot_session_data(handles);
    
    guidata(hObject, handles);

end

function edit_start_exclusion_criteria (hObject, eventdata)
    handles = guidata(hObject);
    plot_session_data(handles);
    guidata(hObject, handles);
end

function edit_end_exclusion_criteria (hObject, eventdata)
    handles = guidata(hObject);
    plot_session_data(handles);
    guidata(hObject, handles);
end

function plot_session_data (handles)

    %Get parameters on what we should plot
    session_transit_string = handles.transit_strings{handles.session_transit};
    compare_left_right = handles.compare_left_right;
    
    %Get stats exclusion criteria
    start_exclusion_str = get(handles.session_stats_before_criterion, 'string');
    end_exclusion_str = get(handles.session_stats_after_criterion, 'string');
    start_exclusion_num = str2double(start_exclusion_str);
    end_exclusion_num = str2double(end_exclusion_str);
    exclusion_method = 'None';
    exclusion_timing = 'None';
    
    switch (handles.stats_exclusion_criteria)
        case 2
            exclusion_method = 'Raw';
            exclusion_timing = 'TimeBased';
        case 3
            exclusion_method = 'Raw';
            exclusion_timing = 'TrialBased';
        case 4
            exclusion_method = 'Relative';
            exclusion_timing = 'TimeBased';
        case 5
            exclusion_method = 'Relative';
            exclusion_timing = 'TrialBased';
    end
    
    %Calculate stats
    [stat1, p1] = handles.dataset.Rats(handles.current_rat).Sessions(handles.current_session).GetSessionStats('Statistic', PTSD_Utility.SessionStatsCorrelation, ...
        'TransitType', session_transit_string);
    [stat2, p2, fic, lic] = handles.dataset.Rats(handles.current_rat).Sessions(handles.current_session).GetSessionStats('Statistic', PTSD_Utility.SessionStatsTTest, ...
        'TransitType', session_transit_string, 'TrialExclusionMethod', exclusion_method, 'TrialExclusionTiming', exclusion_timing, ...
        'StartExclusion', start_exclusion_num, 'EndExclusion', end_exclusion_num);
    [stat3, p3] = handles.dataset.Rats(handles.current_rat).Sessions(handles.current_session).GetSessionStats('Statistic', PTSD_Utility.SessionStatsTTestPreceding, ...
        'TransitType', session_transit_string);
    
    %Prepare stats for output
    stats_string1 = ['correlation, r = ' num2str(stat1) ', p = ' num2str(p1)];
    stats_string2 = ['t-test vs all silent, p = ' num2str(p2)];
    stats_string3 = ['t-test vs preceding, p = ' num2str(p3)];
    final_stats_string = sprintf('%s\n%s\n%s\n', stats_string1, stats_string2, stats_string3);
    
    %Output stats
    set(handles.session_stats_textbox, 'string', final_stats_string);
    
    %Plot data
    cla(handles.session_axis, 'reset');
    handles.dataset.Rats(handles.current_rat).Sessions(handles.current_session).PlotSession( ...
        'TransitType', session_transit_string, ...
        'CompareLeftAndRight', compare_left_right, ...
        'Figure', handles.session_axis);
    
    %Plot gray areas over excluded trials from stats, if there are any
    if (~isnan(fic) && ~isnan(lic))
        p1 = patch([0 fic fic 0], [min(ylim) min(ylim) max(ylim) max(ylim)], [0.7 0.7 0.7]);
        set(p1, 'FaceAlpha', 0.5);
        set(p1, 'EdgeColor', 'none');
        
        p2 = patch([lic max(xlim) max(xlim) lic], [min(ylim) min(ylim) max(ylim) max(ylim)], [0.7 0.7 0.7]);
        set(p2, 'FaceAlpha', 0.5);
        set(p2, 'EdgeColor', 'none');
    end

end


%% Plot trial stuff

function trials_slider_callback (hObject, eventdata)

    handles = guidata(hObject);
    
    slider_value = get(hObject,'Value');
    handles.current_trial = round(slider_value);
    set(handles.current_trial_label, 'string', num2str(handles.current_trial));
    
    plot_trial_data(handles);
    
    guidata(hObject, handles);

end

function trials_use_raw_data_callback (hObject, eventdata)

    handles = guidata(hObject);

    handles.raw_data = get(hObject, 'value');
    
    plot_trial_data(handles);
    
    guidata(hObject, handles);

end

function trials_use_time_as_x_axis_callback (hObject, eventdata)

    handles = guidata(hObject);

    handles.use_time = get(hObject, 'value');
    
    plot_trial_data(handles);
    
    guidata(hObject, handles);

end

function plot_trial_data (handles)

    session = handles.dataset.Rats(handles.current_rat).Sessions(handles.current_session);
    
    cla(handles.trials_axis, 'reset');
    
    if (~isempty(session.Trials))
        trial = session.Trials(handles.current_trial);
        if (handles.raw_data)
            trial.PlotTrial('RawData', handles.raw_data, ...
                'UseTime', handles.use_time, ...
                'Figure', handles.trials_axis);
        else
            trial.PlotTrial2('Figure', handles.trials_axis);
        end
    else
        axes(handles.trials_axis);
        text(10, 10, 'No trials found for this session.', 'FontSize', 14);
        xlim([0 30]);
        ylim([0 30]);
    end

end

%% Plot segment stuff

function segments_selection_box_callback (hObject, eventdata)

    handles = guidata(hObject);
    plot_segment_data(handles);
    guidata(hObject, handles);

end

function single_rat_segment_length_changed (hObject, eventdata)

    handles = guidata(hObject);
    plot_segment_data(handles);    
    guidata(hObject, handles);
    
end

function plot_segment_data (handles)

    which_segment_type = get(handles.segments_selection_type_box, 'value');
    segment_length = str2double(get(handles.single_rat_segment_length, 'string'));

    [before, after] = handles.dataset.Rats(handles.current_rat).Sessions(handles.current_session).RetrieveSegments('SegmentLength', segment_length);
    session_sound_type = handles.dataset.Rats(handles.current_rat).Sessions(handles.current_session).SessionSoundType;
    is_session_sound = handles.dataset.Rats(handles.current_rat).Sessions(handles.current_session).IsSessionSound;

    sound_string = '';
    if (~is_session_sound)
        sound_string = 'Silent session';
    else
        sound_string = PTSD_EventType.event_display_strings(session_sound_type);
    end
    set(handles.single_rat_single_session_sound_type_label, 'string', sound_string);
    
    
    property_name = 'TotalLeftFeederEvents';
    switch (which_segment_type)
        case 1
            property_name = 'TotalLeftFeederEvents';
        case 2
            property_name = 'TotalLeftNosepokeEvents';
        case 3
            property_name = 'TotalLeftProxEvents';
        case 4
            property_name = 'TotalRightProxEvents';
        case 5
            property_name = 'TotalRightNosepokeEvents';
        case 6
            property_name = 'TotalRightFeederEvents';
        case 7
            property_name = 'TotalFeederEvents';
        case 8
            property_name = 'TotalNosepokeEvents';
        case 9
            property_name = 'TotalProxEvents';
        case 10
            property_name = 'TotalEvents';
    end
    
    cla(handles.segments_plot, 'reset');
    axes(handles.segments_plot);
    if (~isempty(before) && ~isempty(after))
        before_values = [before.(property_name)];
        after_values = [after.(property_name)];

        bar([before_values' after_values']);        
        ylabel('Total events');
        legend('Before', 'After');
    end
    
end

%% Copy figure stuff

function s = copy_figure_callback (hObject, eventdata)

    handles = guidata(hObject);

    selected_tab = get(handles.tab_group, 'SelectedTab');
    axis_to_copy = handles.group_axis;
    tag = get(selected_tab, 'Tag');
    if (strcmpi(tag, 'Groups') == 1)
        axis_to_copy = handles.groups_plot_axis;
    elseif (strcmpi(tag, 'AllRats') == 1)
        axis_to_copy = handles.group_axis;
    elseif (strcmpi(tag, 'SingleRat') == 1)
        axis_to_copy = handles.rat_axis;
    elseif (strcmpi(tag, 'Sessions') == 1)
        axis_to_copy = handles.session_axis;
    elseif (strcmpi(tag, 'Trials') == 1)
        axis_to_copy = handles.trials_axis;
    elseif (strcmpi(tag, 'Segments') == 1)
        axis_to_copy = handles.segments_plot;
    end
    
    new_figure = figure;
    new_axis = gca;
    new_figure_position = get(new_axis, 'position');
    clf(new_figure);
    new_handle = copyobj(axis_to_copy, new_figure);
    set(new_handle, 'position', new_figure_position);
    
    guidata(hObject, handles);
    
end






